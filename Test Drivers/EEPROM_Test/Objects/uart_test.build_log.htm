<html>
<body>
<pre>
<h1>µVision Build Log</h1>
<h2>Tool Versions:</h2>
IDE-Version: µVision V5.39.0.0
Copyright (C) 2023 ARM Ltd and ARM Germany GmbH. All rights reserved.
License Information: Omar Ashraf, Ain Shams University, LIC=----
 
Tool Versions:
Toolchain:       MDK-Lite  Version: 5.39.0.0
Toolchain Path:  C:\Keil_v5\ARM\ARMCLANG\Bin
C Compiler:      ArmClang.exe V6.21
Assembler:       Armasm.exe V6.21
Linker/Locator:  ArmLink.exe V6.21
Library Manager: ArmAr.exe V6.21
Hex Converter:   FromElf.exe V6.21
CPU DLL:         SARMCM3.DLL V5.39.0.0
Dialog DLL:      DCM.DLL V1.17.5.0
Target DLL:      UL2CM3.DLL V1.164.9.0
Dialog DLL:      TCM.DLL V1.56.4.0
 
<h2>Project:</h2>
D:\Study\Embedded Systems\9-Project\Test Drivers\EEPROM_Test\eeprom_test.uvprojx
Project File Date:  05/14/2024

<h2>Output:</h2>
*** Using Compiler 'V6.21', folder: 'C:\Keil_v5\ARM\ARMCLANG\Bin'
Build target 'Target 1'
compiling EEPROM_Program.c...
GPIO_Program.c(237): warning: non-void function does not return a value [-Wreturn-type]
  237 | }
      | ^
1 warning generated.
compiling GPIO_Program.c...
UART_Program.c(589): warning: shift count >= width of type [-Wshift-count-overflow]
  589 |         if (!GET_BIT(UART0_FR_R, UART_FR_TXFF))
      |              ^                   ~~~~~~~~~~~~
./BIT_MATH.h(49): note: expanded from macro 'GET_BIT'
   49 | #define GET_BIT(REG, BIT_NUMBER) ((REG & (1 << BIT_NUMBER)) >> BIT_NUMBER)
      |                                             ^  ~~~~~~~~~~
UART_Program.c(589): warning: shift count >= width of type [-Wshift-count-overflow]
  589 |         if (!GET_BIT(UART0_FR_R, UART_FR_TXFF))
      |              ^                   ~~~~~~~~~~~~
./BIT_MATH.h(49): note: expanded from macro 'GET_BIT'
   49 | #define GET_BIT(REG, BIT_NUMBER) ((REG & (1 << BIT_NUMBER)) >> BIT_NUMBER)
      |                                                             ^  ~~~~~~~~~~
UART_Program.c(593): warning: shift count >= width of type [-Wshift-count-overflow]
  593 |         if (!GET_BIT(UART1_FR_R, UART_FR_TXFF))
      |              ^                   ~~~~~~~~~~~~
./BIT_MATH.h(49): note: expanded from macro 'GET_BIT'
   49 | #define GET_BIT(REG, BIT_NUMBER) ((REG & (1 << BIT_NUMBER)) >> BIT_NUMBER)
      |                                             ^  ~~~~~~~~~~
UART_Program.c(593): warning: shift count >= width of type [-Wshift-count-overflow]
  593 |         if (!GET_BIT(UART1_FR_R, UART_FR_TXFF))
      |              ^                   ~~~~~~~~~~~~
./BIT_MATH.h(49): note: expanded from macro 'GET_BIT'
   49 | #define GET_BIT(REG, BIT_NUMBER) ((REG & (1 << BIT_NUMBER)) >> BIT_NUMBER)
      |                                                             ^  ~~~~~~~~~~
UART_Program.c(597): warning: shift count >= width of type [-Wshift-count-overflow]
  597 |         if (!GET_BIT(UART2_FR_R, UART_FR_TXFF))
      |              ^                   ~~~~~~~~~~~~
./BIT_MATH.h(49): note: expanded from macro 'GET_BIT'
   49 | #define GET_BIT(REG, BIT_NUMBER) ((REG & (1 << BIT_NUMBER)) >> BIT_NUMBER)
      |                                             ^  ~~~~~~~~~~
UART_Program.c(597): warning: shift count >= width of type [-Wshift-count-overflow]
  597 |         if (!GET_BIT(UART2_FR_R, UART_FR_TXFF))
      |              ^                   ~~~~~~~~~~~~
./BIT_MATH.h(49): note: expanded from macro 'GET_BIT'
   49 | #define GET_BIT(REG, BIT_NUMBER) ((REG & (1 << BIT_NUMBER)) >> BIT_NUMBER)
      |                                                             ^  ~~~~~~~~~~
UART_Program.c(601): warning: shift count >= width of type [-Wshift-count-overflow]
  601 |         if (!GET_BIT(UART6_FR_R, UART_FR_TXFF))
      |              ^                   ~~~~~~~~~~~~
./BIT_MATH.h(49): note: expanded from macro 'GET_BIT'
   49 | #define GET_BIT(REG, BIT_NUMBER) ((REG & (1 << BIT_NUMBER)) >> BIT_NUMBER)
      |                                             ^  ~~~~~~~~~~
UART_Program.c(601): warning: shift count >= width of type [-Wshift-count-overflow]
  601 |         if (!GET_BIT(UART6_FR_R, UART_FR_TXFF))
      |              ^                   ~~~~~~~~~~~~
./BIT_MATH.h(49): note: expanded from macro 'GET_BIT'
   49 | #define GET_BIT(REG, BIT_NUMBER) ((REG & (1 << BIT_NUMBER)) >> BIT_NUMBER)
      |                                                             ^  ~~~~~~~~~~
UART_Program.c(605): warning: shift count >= width of type [-Wshift-count-overflow]
  605 |         if (!GET_BIT(UART7_FR_R, UART_FR_TXFF))
      |              ^                   ~~~~~~~~~~~~
./BIT_MATH.h(49): note: expanded from macro 'GET_BIT'
   49 | #define GET_BIT(REG, BIT_NUMBER) ((REG & (1 << BIT_NUMBER)) >> BIT_NUMBER)
      |                                             ^  ~~~~~~~~~~
UART_Program.c(605): warning: shift count >= width of type [-Wshift-count-overflow]
  605 |         if (!GET_BIT(UART7_FR_R, UART_FR_TXFF))
      |              ^                   ~~~~~~~~~~~~
./BIT_MATH.h(49): note: expanded from macro 'GET_BIT'
   49 | #define GET_BIT(REG, BIT_NUMBER) ((REG & (1 << BIT_NUMBER)) >> BIT_NUMBER)
      |                                                             ^  ~~~~~~~~~~
UART_Program.c(724): warning: shift count >= width of type [-Wshift-count-overflow]
  724 |         while (!GET_BIT(UART0_FR_R, UART_FR_TXFF) && *copy_pu8String != '\0')
      |                 ^                   ~~~~~~~~~~~~
./BIT_MATH.h(49): note: expanded from macro 'GET_BIT'
   49 | #define GET_BIT(REG, BIT_NUMBER) ((REG & (1 << BIT_NUMBER)) >> BIT_NUMBER)
      |                                             ^  ~~~~~~~~~~
UART_Program.c(724): warning: shift count >= width of type [-Wshift-count-overflow]
  724 |         while (!GET_BIT(UART0_FR_R, UART_FR_TXFF) && *copy_pu8String != '\0')
      |                 ^                   ~~~~~~~~~~~~
./BIT_MATH.h(49): note: expanded from macro 'GET_BIT'
   49 | #define GET_BIT(REG, BIT_NUMBER) ((REG & (1 << BIT_NUMBER)) >> BIT_NUMBER)
      |                                                             ^  ~~~~~~~~~~
UART_Program.c(731): warning: shift count >= width of type [-Wshift-count-overflow]
  731 |         while (!GET_BIT(UART1_FR_R, UART_FR_TXFF) && *copy_pu8String != '\0')
      |                 ^                   ~~~~~~~~~~~~
./BIT_MATH.h(49): note: expanded from macro 'GET_BIT'
   49 | #define GET_BIT(REG, BIT_NUMBER) ((REG & (1 << BIT_NUMBER)) >> BIT_NUMBER)
      |                                             ^  ~~~~~~~~~~
UART_Program.c(731): warning: shift count >= width of type [-Wshift-count-overflow]
  731 |         while (!GET_BIT(UART1_FR_R, UART_FR_TXFF) && *copy_pu8String != '\0')
      |                 ^                   ~~~~~~~~~~~~
./BIT_MATH.h(49): note: expanded from macro 'GET_BIT'
   49 | #define GET_BIT(REG, BIT_NUMBER) ((REG & (1 << BIT_NUMBER)) >> BIT_NUMBER)
      |                                                             ^  ~~~~~~~~~~
UART_Program.c(738): warning: shift count >= width of type [-Wshift-count-overflow]
  738 |         while (!GET_BIT(UART2_FR_R, UART_FR_TXFF) && *copy_pu8String != '\0')
      |                 ^                   ~~~~~~~~~~~~
./BIT_MATH.h(49): note: expanded from macro 'GET_BIT'
   49 | #define GET_BIT(REG, BIT_NUMBER) ((REG & (1 << BIT_NUMBER)) >> BIT_NUMBER)
      |                                             ^  ~~~~~~~~~~
UART_Program.c(738): warning: shift count >= width of type [-Wshift-count-overflow]
  738 |         while (!GET_BIT(UART2_FR_R, UART_FR_TXFF) && *copy_pu8String != '\0')
      |                 ^                   ~~~~~~~~~~~~
./BIT_MATH.h(49): note: expanded from macro 'GET_BIT'
   49 | #define GET_BIT(REG, BIT_NUMBER) ((REG & (1 << BIT_NUMBER)) >> BIT_NUMBER)
      |                                                             ^  ~~~~~~~~~~
UART_Program.c(745): warning: shift count >= width of type [-Wshift-count-overflow]
  745 |         while (!GET_BIT(UART3_FR_R, UART_FR_TXFF) && *copy_pu8String != '\0')
      |                 ^                   ~~~~~~~~~~~~
./BIT_MATH.h(49): note: expanded from macro 'GET_BIT'
   49 | #define GET_BIT(REG, BIT_NUMBER) ((REG & (1 << BIT_NUMBER)) >> BIT_NUMBER)
      |                                             ^  ~~~~~~~~~~
UART_Program.c(745): warning: shift count >= width of type [-Wshift-count-overflow]
  745 |         while (!GET_BIT(UART3_FR_R, UART_FR_TXFF) && *copy_pu8String != '\0')
      |                 ^                   ~~~~~~~~~~~~
./BIT_MATH.h(49): note: expanded from macro 'GET_BIT'
   49 | #define GET_BIT(REG, BIT_NUMBER) ((REG & (1 << BIT_NUMBER)) >> BIT_NUMBER)
      |                                                             ^  ~~~~~~~~~~
UART_Program.c(752): warning: shift count >= width of type [-Wshift-count-overflow]
  752 |         while (!GET_BIT(UART4_FR_R, UART_FR_TXFF) && *copy_pu8String != '\0')
      |                 ^                   ~~~~~~~~~~~~
./BIT_MATH.h(49): note: expanded from macro 'GET_BIT'
   49 | #define GET_BIT(REG, BIT_NUMBER) ((REG & (1 << BIT_NUMBER)) >> BIT_NUMBER)
      |                                             ^  ~~~~~~~~~~
UART_Program.c(752): warning: shift count >= width of type [-Wshift-count-overflow]
  752 |         while (!GET_BIT(UART4_FR_R, UART_FR_TXFF) && *copy_pu8String != '\0')
      |                 ^                   ~~~~~~~~~~~~
./BIT_MATH.h(49): note: expanded from macro 'GET_BIT'
   49 | #define GET_BIT(REG, BIT_NUMBER) ((REG & (1 << BIT_NUMBER)) >> BIT_NUMBER)
      |                                                             ^  ~~~~~~~~~~
UART_Program.c(759): warning: shift count >= width of type [-Wshift-count-overflow]
  759 |         while (!GET_BIT(UART5_FR_R, UART_FR_TXFF) && *copy_pu8String != '\0')
      |                 ^                   ~~~~~~~~~~~~
./BIT_MATH.h(49): note: expanded from macro 'GET_BIT'
   49 | #define GET_BIT(REG, BIT_NUMBER) ((REG & (1 << BIT_NUMBER)) >> BIT_NUMBER)
      |                                             ^  ~~~~~~~~~~
UART_Program.c(759): warning: shift count >= width of type [-Wshift-count-overflow]
  759 |         while (!GET_BIT(UART5_FR_R, UART_FR_TXFF) && *copy_pu8String != '\0')
      |                 ^                   ~~~~~~~~~~~~
./BIT_MATH.h(49): note: expanded from macro 'GET_BIT'
   49 | #define GET_BIT(REG, BIT_NUMBER) ((REG & (1 << BIT_NUMBER)) >> BIT_NUMBER)
      |                                                             ^  ~~~~~~~~~~
UART_Program.c(766): warning: shift count >= width of type [-Wshift-count-overflow]
  766 |         while (!GET_BIT(UART6_FR_R, UART_FR_TXFF) && *copy_pu8String != '\0')
      |                 ^                   ~~~~~~~~~~~~
./BIT_MATH.h(49): note: expanded from macro 'GET_BIT'
   49 | #define GET_BIT(REG, BIT_NUMBER) ((REG & (1 << BIT_NUMBER)) >> BIT_NUMBER)
      |                                             ^  ~~~~~~~~~~
UART_Program.c(766): warning: shift count >= width of type [-Wshift-count-overflow]
  766 |         while (!GET_BIT(UART6_FR_R, UART_FR_TXFF) && *copy_pu8String != '\0')
      |                 ^                   ~~~~~~~~~~~~
./BIT_MATH.h(49): note: expanded from macro 'GET_BIT'
   49 | #define GET_BIT(REG, BIT_NUMBER) ((REG & (1 << BIT_NUMBER)) >> BIT_NUMBER)
      |                                                             ^  ~~~~~~~~~~
UART_Program.c(773): warning: shift count >= width of type [-Wshift-count-overflow]
  773 |         while (!GET_BIT(UART7_FR_R, UART_FR_TXFF) && *copy_pu8String != '\0')
      |                 ^                   ~~~~~~~~~~~~
./BIT_MATH.h(49): note: expanded from macro 'GET_BIT'
   49 | #define GET_BIT(REG, BIT_NUMBER) ((REG & (1 << BIT_NUMBER)) >> BIT_NUMBER)
      |                                             ^  ~~~~~~~~~~
UART_Program.c(773): warning: shift count >= width of type [-Wshift-count-overflow]
  773 |         while (!GET_BIT(UART7_FR_R, UART_FR_TXFF) && *copy_pu8String != '\0')
      |                 ^                   ~~~~~~~~~~~~
./BIT_MATH.h(49): note: expanded from macro 'GET_BIT'
   49 | #define GET_BIT(REG, BIT_NUMBER) ((REG & (1 << BIT_NUMBER)) >> BIT_NUMBER)
      |                                                             ^  ~~~~~~~~~~
26 warnings generated.
compiling UART_Program.c...
linking...
Program Size: Code=1556 RO-data=636 RW-data=0 ZI-data=1312  
".\Objects\uart_test.axf" - 0 Error(s), 27 Warning(s).

<h2>Software Packages used:</h2>

Package Vendor: ARM
                https://www.keil.com/pack/ARM.CMSIS.6.0.0.pack
                ARM::CMSIS@6.0.0
                CMSIS (Common Microcontroller Software Interface Standard)
   * Component: CORE Version: 6.0.0

Package Vendor: Keil
                http://www.keil.com/pack/Keil.TM4C_DFP.1.1.0.pack
                Keil::TM4C_DFP@1.1.0
                Texas Instruments Tiva C Series Device Support and Examples
   * Component: Startup Version: 1.0.1

<h2>Collection of Component include folders:</h2>
  ./RTE/_Target_1
  C:/Users/oashr/AppData/Local/Arm/Packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include
  C:/Users/oashr/AppData/Local/Arm/Packs/Keil/TM4C_DFP/1.1.0/Device/Include/TM4C123

<h2>Collection of Component Files used:</h2>

   * Component: ARM::CMSIS:CORE@6.0.0

   * Component: Keil::Device:Startup@1.0.1
      Source file:   Device/Source/ARM/startup_TM4C123.s
      Source file:   Device/Source/system_TM4C123.c
      Include file:  Device/Include/TM4C123/TM4C123.h
Build Time Elapsed:  00:00:01
</pre>
</body>
</html>
